Script started on Fri 17 Jan 2020 12:28:26 PM EST
]0;pannul@charlie: ~/Desktop/Shoppingcart/src[01;32mpannul@charlie[00m:[01;34m~/Desktop/Shoppingcart/src[00m$ ls -l
total 10
-rw-r--r-- 1 pannul temp  715 Jan 17 02:05 Book.java
-rw-r--r-- 1 pannul temp  799 Jan 17 02:05 GiftCard.java
-rw-r--r-- 1 pannul temp  594 Jan 17 12:09 Item.java
-rw-r--r-- 1 pannul temp 2396 Jan 17 12:21 ShoppingCartApp.java
-rw-r--r-- 1 pannul temp  888 Jan 17 12:21 ShoppingCart.java
-rw-r--r-- 1 pannul temp    0 Jan 17 12:28 ShoppingCartScript.txt
]0;pannul@charlie: ~/Desktop/Shoppingcart/src[01;32mpannul@charlie[00m:[01;34m~/Desktop/Shoppingcart/src[00m$ cat *.java
import java.util.ArrayList;

public class Book extends Item {
	
	private String author ;
	private String title;

//	getters 
	
	public String getAuthor() {
		return author;
	}
	public String getTitle() {
		return title;
	}
	
//	setters
	
	public void setAuthor(String author) {
		this.author = author;
	}
	
	public void setTitle(String title) {
		this.title = title;
	}
	
	// toString method 
	
	public String toString() {
		String outputBook= "";
		outputBook+= "ID : " + this.getId() + "\n";
		outputBook+= "Price : " + this.getPrice()+ "\n";
		outputBook+= "Author : " + this.getAuthor()+ "\n";
		outputBook+= "Title : " + this.getTitle()+ "\n";
		return outputBook;	
	}

}

public class GiftCard extends Item {
	
	private String description ;
	private String color;
	
//constructor
	
	public GiftCard() {
		super();
		this.description = description;
		this.color = color;
	}
	
// getters
	
	public String getDescription() {
		return description;
	}

	public String getColor() {
		return color;
	}
	
// setters 
	
	public void setDescription(String description) {
		this.description = description;
	}

	public void setColor(String color) {
		this.color = color;
	}
	
	
	public String toString() {
		String outputGC= "";
		outputGC+= "ID : " + getId()+ "\n";
		outputGC+= "Price : " + getPrice()+ "\n";
		outputGC+= "Description : " + this.description+ "\n";
		outputGC+= "Color : " + this.color+ "\n";
		return outputGC;	
	}

}
import java.util.*;

abstract class Item implements Comparable<Item>  {

	private int id;
	private float price;

	//setters
	void setId() {
		this.id = ShoppingCartApp.idS++;
	}

	public void setPrice(float price) {
		this.price = price;
	}
	
	//getters
	public int getId() {
		return this.id;
	}

	public float getPrice() {
		return price;
	}
	
	//A method to compare two prices for sorting
	public int compareTo(Item i) {
		if(this.getPrice()>i.getPrice()) {
			return 1;
		}
		else if (this.getPrice()<i.getPrice()) {
			return -1;
		}
		return 0;
	}

}
import java.util.Scanner;

//Main class
public class ShoppingCartApp {
    static int idS=0 ;
    
	public static void main(String[] args) {
		
		
		ShoppingCart obj = new ShoppingCart();

		while(true){
			System.out.println("What do you want to do ? \n");

			System.out.println("Add item to cart (press a) \n");
			
			System.out.println("Display items (press d) \n");
			
			System.out.println("Exit (press e) \n");
			
			Scanner input = new Scanner(System.in);
			String action = input.next();
			
			//if user wants to exit loop will break
			if(action.equals("e")) {
				System.out.println("Thanks for Shopping ");
				break;
			}
			
			// if user wants to add an item to cart
			else if(action.equals("a")) {
				Book objB = new Book();
				System.out.println("Add new Book (press b) \n");
				System.out.println("Add new Gift Card (press g) \n");
				String action1 = input.next();
				
				//if user wants to add a book to cart
				if(action1.equals("b")) {
					objB.setId();
					System.out.println("Enter the title of Book : \n");
					objB.setTitle(input.next());
					
					System.out.println("Enter author name :  \n");
					objB.setAuthor(input.next());
					
					System.out.println("Enter price of book (in Dollars) : \n");
					objB.setPrice(input.nextFloat());
					
					ShoppingCart.cart.add(objB);
					System.out.println("Item added succesfully to the cart . \n");
					System.out.println("--------------------------------------------- \n");
					
				}
				
				//if user wants to add a giftcard to cart
				else if (action1.equals("g")) {
					GiftCard objG = new GiftCard();
					objG.setId();
					System.out.println("Enter the description of GiftCard : \n");
					objG.setDescription(input.next());
					
					System.out.println("Enter the color of GiftCard :  \n");
					objG.setColor(input.next());
					
					System.out.println("Enter price of GiftCard (in Dollars) : \n");
					objG.setPrice(input.nextFloat());
					
					ShoppingCart.cart.add(objG);
					System.out.println("Item added succesfully to the cart . \n");
					System.out.println("--------------------------------------------- \n");
				}
			}
			
			//if user wants to display items in cart
			else if (action.equals("d")) {
				ShoppingCart.sortByPrice();
				ShoppingCart.displayCart();
			}
		
		}
			
	}
}

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ShoppingCart {
	
	//an arraylist is used here to maintain items in cart
	static ArrayList<Item> cart = new ArrayList<Item>();

	//A method to add new book to the cart
	void addNewBook() {
		cart.add(new Item() {
		});
	}

	//A method to add new giftcard to the cart
	void addNewGiftCard() {
		cart.add(new Item() {
		});
	}

	//A method to display the cart
	static void displayCart() {
		
		for (int i = 0; i < cart.size(); i++) {
			try {
				Book book = (Book) cart.get(i);
				System.out.println( book.toString());
			} catch (Exception e) {
				GiftCard giftCard = (GiftCard) cart.get(i);
				System.out.println( giftCard.toString());
			}
		}
	}
	
	//A method to sort the cart by price
	static void sortByPrice() {
		Collections.sort(cart);
	}

}
]0;pannul@charlie: ~/Desktop/Shoppingcart/src[01;32mpannul@charlie[00m:[01;34m~/Desktop/Shoppingcart/src[00m$ javac ShoppingCartApp.java
]0;pannul@charlie: ~/Desktop/Shoppingcart/src[01;32mpannul@charlie[00m:[01;34m~/Desktop/Shoppingcart/src[00m$ java ShoppingCartApp
What do you want to do ? 

Add item to cart (press a) 

Display items (press d) 

Exit (press e) 

a
Add new Book (press b) 

Add new Gift Card (press g) 

b
Enter the title of Book : 

Lolita
Enter author name :  

Vladimir
Enter price of book (in Dollars) : 

30
Item added succesfully to the cart . 

--------------------------------------------- 

What do you want to do ? 

Add item to cart (press a) 

Display items (press d) 

Exit (press e) 

a
Add new Book (press b) 

Add new Gift Card (press g) 

b
Enter the title of Book : 

Dubliners
Enter author name :  

J.Joyce
Enter price of book (in Dollars) : 

69.89
Item added succesfully to the cart . 

--------------------------------------------- 

What do you want to do ? 

Add item to cart (press a) 

Display items (press d) 

Exit (press e) 

a
Add new Book (press b) 

Add new Gift Card (press g) 

g
Enter the description of GiftCard : 

BirthdayCard
Enter the color of GiftCard :  

Red
Enter price of GiftCard (in Dollars) : 

4.78
Item added succesfully to the cart . 

--------------------------------------------- 

What do you want to do ? 

Add item to cart (press a) 

Display items (press d) 

Exit (press e) 

d
ID : 2
Price : 4.78
Description : BirthdayCard
Color : Red

ID : 0
Price : 30.0
Author : Vladimir
Title : Lolita

ID : 1
Price : 69.89
Author : J.Joyce
Title : Dubliners

What do you want to do ? 

Add item to cart (press a) 

Display items (press d) 

Exit (press e) 

e
Thanks for Shopping 
]0;p